buildscript {
    ext.kotlin_version = '1.1.1'
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "maven"
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'

version = modVersion
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    runDir = "run"
    mappings = project.mcpVersion
}

repositories {
    maven {
        url = "http://maven.bluexin.be/repository/snapshots/"
    }
    maven { // JEI
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url = "https://maven.bluexin.be/repository/snapshots/"
    }
}

reobf {
    jar {
        extraLines += ["PK: be/bluexin/generation be/bluexin/generationtests/shade/be/bluexin/generation"]
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    compile "com.teamwizardry.librarianlib:librarianlib-1.11.2:3.1.5-SNAPSHOT:deobf"
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}:api"
    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
    shade "be.bluexin:dungeon-generator:0.3-SNAPSHOT"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

uploadArchives {
    if (System.getenv('REPO_PWD') != null) {
        repositories.mavenDeployer {
            repository(url: "http://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT")? "snapshots": "releases") + "/") {
                authentication(userName: "CI", password: System.getenv('REPO_PWD'))
            }
        }
    } else {
        println("No password set up! Uploading to local.")
        repositories.mavenDeployer {
            repository(url: 'file://G:/saoui/build/mvn')
        }
    }
}

task sourceJar(type: Jar, dependsOn: "sourceMainJava", overwrite: true) {
    from "build/sources/main/java"
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

tasks.withType(Copy) {
    includeEmptyDirs = false
}

idea { module { inheritOutputDirs = true } }

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
